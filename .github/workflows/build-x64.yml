name: Build and Release macOS x64 App

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 4.0.0-pre.2)'
        required: true
        default: '4.0.0-pre.2'
      is_prerelease:
        description: 'Is this a pre-release?'
        required: true
        default: true
        type: boolean

jobs:
  build-macos-x64:
    runs-on: macos-13
    if: github.actor != 'dependabot[bot]'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      - name: Install Xcode Command Line Tools
        run: |
          xcode-select --install || true

      - name: Install Python and tools
        run: |
          brew install python@3.11 || true
          brew link --overwrite python@3.11
          python3 -m ensurepip --upgrade
          python3 -m pip install setuptools wheel

      - name: Clean node_modules and caches
        run: |
          rm -rf node_modules
          rm -rf ~/.npm/_prebuilds
          rm -rf ~/.cache

      - name: Install dependencies (force source build)
        run: |
          export npm_config_build_from_source=true
          yarn install --frozen-lockfile
        env:
          PYTHON: /usr/local/bin/python3
          npm_config_python: /usr/local/bin/python3

      - name: Import signing certificate
        run: |
          echo "$APPLE_CERTIFICATE_P12" | base64 --decode > certificate.p12
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
        env:
          APPLE_CERTIFICATE_P12: ${{ secrets.APPLE_CERTIFICATE_P12 }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}

      - name: Build and Sign (no publish)
        env:
          CSC_LINK: certificate.p12
          CSC_KEY_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          DEBUG: electron-builder
        run: |
          npx electron-builder --mac --x64 --publish never --config.extraMetadata.version=${{ inputs.version }}

      - name: Normalize artifact names to "Mx. Voice-*"
        run: |
          ls -la dist | cat
          for f in dist/Mx.-Voice-* dist/Mx.Voice-*; do
            if [ -e "$f" ]; then
              base=$(basename "$f")
              norm=${base/Mx.-Voice-/Mx. Voice-}
              norm=${norm/Mx.Voice-/Mx. Voice-}
              if [ "$base" != "$norm" ]; then
                echo "Renaming $base -> $norm"
                mv "dist/$base" "dist/$norm"
              fi
            fi
          done
          if [ -f dist/latest-mac.yml ]; then
            sed -i '' -e 's/Mx\.-Voice-/Mx. Voice-/g' -e 's/Mx\.Voice-/Mx. Voice-/g' dist/latest-mac.yml || sed -i -e 's/Mx\.-Voice-/Mx. Voice-/g' -e 's/Mx\.Voice-/Mx. Voice-/g' dist/latest-mac.yml
          fi

      - name: Upload artifacts to GitHub Release (clobber)
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          TAG=v${{ inputs.version }}
          gh release upload "$TAG" dist/*.dmg dist/*.zip dist/*.blockmap dist/latest-mac.yml --clobber

      - name: Upload build artifacts (backup)
        uses: actions/upload-artifact@v4
        with:
          name: macos-x64-signed-build
          path: |
            dist/*.dmg
            dist/*.zip
            dist/*.blockmap
            dist/latest-mac.yml
