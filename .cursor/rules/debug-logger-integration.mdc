---
alwaysApply: true
---

- Use proper dependency injection instead of fallbacks or global access for DebugLogger
- The DebugLogger must be injected as a dependency rather than accessed globally to avoid timing issues
- Accept debugLogger parameter in constructor: `constructor(debugLogger = null)`
- Add setDebugLogger() method to set logger after initialization
- Add ensureDebugLogger() method to validate logger before use
- Always call ensureDebugLogger() before any debug logging in methods
- Throw clear errors if debug logger isn't available: `throw new Error('DebugLogger not initialized')`
- Include class name and context in error messages
- Do not fall back to console.log - fail fast with clear errors
- Initialize modules after debug logger is available in renderer.js
- Remove any global window.debugLog access
- Remove any console.log fallbacks
- Test that module fails properly without debug logger
- When migrating a module: update constructor, add setDebugLogger(), add ensureDebugLogger(), update all methods, update renderer.js initialization
